#include "Buzzer.h"
#include "MockHardwareInterface.h"
#include "gmock/gmock.h"
#include "gtest/gtest.h"

class BuzzerTest : public testing::Test {
protected:
  MockHardwareInterface hardwareInterfaceMock;
  Buzzer buzzer;
};

TEST_F(BuzzerTest, SingleBeepStartsPWM) {
  int pin = 12;
  int frequency = 900;
  int duration = 100;

  EXPECT_CALL(hardwareInterfaceMock, startPWM(pin, frequency, duration))
      .Times(1);

  buzzer.initialize(pin, hardwareInterfaceMock);
  buzzer.singleBeep(frequency, duration);
}

TEST_F(BuzzerTest, StopBeepStopsPWM) {
  int pin = 12;

  // Arrange
  buzzer.initialize(pin, hardwareInterfaceMock);
  buzzer.singleBeep(900, 100); // This will set _isBeeping to true

  // Expect
  EXPECT_CALL(hardwareInterfaceMock, stopPWM(pin)).Times(1);

  // Act
  buzzer.stopBeep();
}

TEST_F(BuzzerTest, StartRapidBeepUsesIntervalCorrectly) {
  int pin = 12;
  int frequency = 900;
  int duration = 100;
  int interval = 200;

  EXPECT_CALL(hardwareInterfaceMock,
              startRepeatedPWM(pin, frequency, duration, interval))
      .Times(1);

  buzzer.initialize(pin, hardwareInterfaceMock);
  buzzer.rapidBeep(frequency, duration, interval);
}

TEST_F(BuzzerTest, StartRapidBeepDoesNothingIfAlreadyBeeping) {
  int pin = 12;
  int frequency = 900;
  int duration = 100;
  int interval = 200;

  EXPECT_CALL(hardwareInterfaceMock,
              startRepeatedPWM(pin, frequency, duration, interval))
      .Times(1); // Only called once

  buzzer.initialize(pin, hardwareInterfaceMock);
  buzzer.rapidBeep(frequency, duration, interval);
  buzzer.rapidBeep(frequency, duration,
                   interval); // Should not trigger another startRepeatedPWM
}

TEST_F(BuzzerTest, SingleBeepInterruptsOngoingSingleBeep) {
  int pin = 12;
  int frequency1 = 900;
  int duration1 = 100;
  int frequency2 = 800;
  int duration2 = 90;

  testing::InSequence s; // Ensures the expectations are met in this specific order

  EXPECT_CALL(hardwareInterfaceMock, startPWM(pin, frequency1, duration1))
      .Times(1);
  EXPECT_CALL(hardwareInterfaceMock, stopPWM(pin))
      .Times(1); // Interrupts the first beep
  EXPECT_CALL(hardwareInterfaceMock, startPWM(pin, frequency2, duration2))
      .Times(1);

  buzzer.initialize(pin, hardwareInterfaceMock);
  buzzer.singleBeep(frequency1, duration1);
  buzzer.singleBeep(frequency2, duration2); // Should interrupt the first beep
}

TEST_F(BuzzerTest, StopBeepStopsOngoingBeeping) {
  int pin = 12;
  int frequency = 900;
  int duration = 100;

  testing::InSequence s;

  EXPECT_CALL(hardwareInterfaceMock, startPWM(pin, frequency, duration))
      .Times(1);
  EXPECT_CALL(hardwareInterfaceMock, stopPWM(pin)).Times(1);

  buzzer.initialize(pin, hardwareInterfaceMock);
  buzzer.singleBeep(frequency, duration);
  buzzer.stopBeep();
}

TEST_F(BuzzerTest, RapidBeepInterruptsOngoingSingleBeep) {
  int pin = 12;
  int frequency1 = 900;
  int duration1 = 100;
  int frequency2 = 800;
  int duration2 = 90;
  int interval = 150;

  testing::InSequence s;

  EXPECT_CALL(hardwareInterfaceMock, startPWM(pin, frequency1, duration1))
      .Times(1);
  EXPECT_CALL(hardwareInterfaceMock, stopPWM(pin)).Times(1);
  EXPECT_CALL(hardwareInterfaceMock,
              startRepeatedPWM(pin, frequency2, duration2, interval))
      .Times(1);

  buzzer.initialize(pin, hardwareInterfaceMock);
  buzzer.singleBeep(frequency1, duration1);
  buzzer.rapidBeep(frequency2, duration2, interval);
}

TEST_F(BuzzerTest, StopBeepStopsOngoingRapidBeeping) {
  int pin = 12;
  int frequency = 900;
  int duration = 100;
  int interval = 200;

  testing::InSequence s;

  EXPECT_CALL(hardwareInterfaceMock,
              startRepeatedPWM(pin, frequency, duration, interval))
      .Times(1);
  EXPECT_CALL(hardwareInterfaceMock, stopPWM(pin)).Times(1);

  buzzer.initialize(pin, hardwareInterfaceMock);
  buzzer.rapidBeep(frequency, duration, interval);
  buzzer.stopBeep();
}

TEST_F(BuzzerTest, SingleBeepInterruptsOngoingRapidBeep) {
  int pin = 12;
  int rapidFrequency = 800;
  int rapidDuration = 90;
  int rapidInterval = 150;
  int singleFrequency = 900;
  int singleDuration = 100;

  testing::InSequence s;

  EXPECT_CALL(
      hardwareInterfaceMock,
      startRepeatedPWM(pin, rapidFrequency, rapidDuration, rapidInterval))
      .Times(1);
  EXPECT_CALL(hardwareInterfaceMock, stopPWM(pin)).Times(1);
  EXPECT_CALL(hardwareInterfaceMock,
              startPWM(pin, singleFrequency, singleDuration))
      .Times(1);

  buzzer.initialize(pin, hardwareInterfaceMock);
  buzzer.rapidBeep(rapidFrequency, rapidDuration, rapidInterval);
  buzzer.singleBeep(singleFrequency,
                    singleDuration); // Should interrupt rapid beeping
}

TEST_F(BuzzerTest, ButtonReleasedDuringRapidBeepStopsIt) {
  int pin = 12;
  int frequency = 900;
  int duration = 100;
  int interval = 200;

  testing::InSequence s;

  EXPECT_CALL(hardwareInterfaceMock,
              startRepeatedPWM(pin, frequency, duration, interval))
      .Times(1);
  EXPECT_CALL(hardwareInterfaceMock, stopPWM(pin)).Times(1);

  buzzer.initialize(pin, hardwareInterfaceMock);
  buzzer.rapidBeep(frequency, duration, interval);
  buzzer.stopBeep();
}

TEST_F(BuzzerTest, SingleBeepFollowedByRapidBeep) {
  int pin = 12;
  int single_frequency = 900;
  int single_duration = 100;
  int rapid_frequency = 800;
  int rapid_duration = 90;
  int rapid_interval = 150;

  testing::InSequence s;

  EXPECT_CALL(hardwareInterfaceMock,
              startPWM(pin, single_frequency, single_duration))
      .Times(1);
  EXPECT_CALL(hardwareInterfaceMock, stopPWM(pin)).Times(1);
  EXPECT_CALL(
      hardwareInterfaceMock,
      startRepeatedPWM(pin, rapid_frequency, rapid_duration, rapid_interval))
      .Times(1);

  buzzer.initialize(pin, hardwareInterfaceMock);
  buzzer.singleBeep(single_frequency, single_duration);
  buzzer.rapidBeep(rapid_frequency, rapid_duration, rapid_interval);
}
